//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeepSpaceNetwork.BackendServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vehicle", Namespace="http://schemas.datacontract.org/2004/07/Backend")]
    [System.SerializableAttribute()]
    public partial class Vehicle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OrbitRadiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeepSpaceNetwork.BackendServiceReference.Payload PayloadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpacecraftStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double OrbitRadius {
            get {
                return this.OrbitRadiusField;
            }
            set {
                if ((this.OrbitRadiusField.Equals(value) != true)) {
                    this.OrbitRadiusField = value;
                    this.RaisePropertyChanged("OrbitRadius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeepSpaceNetwork.BackendServiceReference.Payload Payload {
            get {
                return this.PayloadField;
            }
            set {
                if ((object.ReferenceEquals(this.PayloadField, value) != true)) {
                    this.PayloadField = value;
                    this.RaisePropertyChanged("Payload");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpacecraftStatus {
            get {
                return this.SpacecraftStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.SpacecraftStatusField, value) != true)) {
                    this.SpacecraftStatusField = value;
                    this.RaisePropertyChanged("SpacecraftStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Payload", Namespace="http://schemas.datacontract.org/2004/07/Backend")]
    [System.SerializableAttribute()]
    public partial class Payload : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PayloadStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PayloadStatus {
            get {
                return this.PayloadStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PayloadStatusField, value) != true)) {
                    this.PayloadStatusField = value;
                    this.RaisePropertyChanged("PayloadStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Telemetry", Namespace="http://schemas.datacontract.org/2004/07/Backend")]
    [System.SerializableAttribute()]
    public partial class Telemetry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AltitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeToOrbitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeToOrbit {
            get {
                return this.TimeToOrbitField;
            }
            set {
                if ((this.TimeToOrbitField.Equals(value) != true)) {
                    this.TimeToOrbitField = value;
                    this.RaisePropertyChanged("TimeToOrbit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BackendServiceReference.BackendServices")]
    public interface BackendServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/AddSpaceCraft", ReplyAction="http://tempuri.org/BackendServices/AddSpaceCraftResponse")]
        string AddSpaceCraft(DeepSpaceNetwork.BackendServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/AddSpaceCraft", ReplyAction="http://tempuri.org/BackendServices/AddSpaceCraftResponse")]
        System.Threading.Tasks.Task<string> AddSpaceCraftAsync(DeepSpaceNetwork.BackendServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetAllSpacecraft", ReplyAction="http://tempuri.org/BackendServices/GetAllSpacecraftResponse")]
        DeepSpaceNetwork.BackendServiceReference.Vehicle[] GetAllSpacecraft();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetAllSpacecraft", ReplyAction="http://tempuri.org/BackendServices/GetAllSpacecraftResponse")]
        System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle[]> GetAllSpacecraftAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/CheckSpacecraftExists", ReplyAction="http://tempuri.org/BackendServices/CheckSpacecraftExistsResponse")]
        long CheckSpacecraftExists(string vehicleName, string payloadName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/CheckSpacecraftExists", ReplyAction="http://tempuri.org/BackendServices/CheckSpacecraftExistsResponse")]
        System.Threading.Tasks.Task<long> CheckSpacecraftExistsAsync(string vehicleName, string payloadName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetAddedSpacecraft", ReplyAction="http://tempuri.org/BackendServices/GetAddedSpacecraftResponse")]
        DeepSpaceNetwork.BackendServiceReference.Vehicle[] GetAddedSpacecraft();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetAddedSpacecraft", ReplyAction="http://tempuri.org/BackendServices/GetAddedSpacecraftResponse")]
        System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle[]> GetAddedSpacecraftAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/UpdateSpacecraft", ReplyAction="http://tempuri.org/BackendServices/UpdateSpacecraftResponse")]
        void UpdateSpacecraft(string vehicleName, string column, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/UpdateSpacecraft", ReplyAction="http://tempuri.org/BackendServices/UpdateSpacecraftResponse")]
        System.Threading.Tasks.Task UpdateSpacecraftAsync(string vehicleName, string column, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetAllOnlineSpacecraft", ReplyAction="http://tempuri.org/BackendServices/GetAllOnlineSpacecraftResponse")]
        DeepSpaceNetwork.BackendServiceReference.Vehicle[] GetAllOnlineSpacecraft();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetAllOnlineSpacecraft", ReplyAction="http://tempuri.org/BackendServices/GetAllOnlineSpacecraftResponse")]
        System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle[]> GetAllOnlineSpacecraftAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetSpacecraft", ReplyAction="http://tempuri.org/BackendServices/GetSpacecraftResponse")]
        DeepSpaceNetwork.BackendServiceReference.Vehicle GetSpacecraft(string vehicleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetSpacecraft", ReplyAction="http://tempuri.org/BackendServices/GetSpacecraftResponse")]
        System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle> GetSpacecraftAsync(string vehicleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetAllOnlinePayload", ReplyAction="http://tempuri.org/BackendServices/GetAllOnlinePayloadResponse")]
        DeepSpaceNetwork.BackendServiceReference.Vehicle[] GetAllOnlinePayload();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetAllOnlinePayload", ReplyAction="http://tempuri.org/BackendServices/GetAllOnlinePayloadResponse")]
        System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle[]> GetAllOnlinePayloadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/UpdateTelemetryMap", ReplyAction="http://tempuri.org/BackendServices/UpdateTelemetryMapResponse")]
        void UpdateTelemetryMap(string vehicleName, DeepSpaceNetwork.BackendServiceReference.Telemetry telemetry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/UpdateTelemetryMap", ReplyAction="http://tempuri.org/BackendServices/UpdateTelemetryMapResponse")]
        System.Threading.Tasks.Task UpdateTelemetryMapAsync(string vehicleName, DeepSpaceNetwork.BackendServiceReference.Telemetry telemetry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetTelemetryOfVehicle", ReplyAction="http://tempuri.org/BackendServices/GetTelemetryOfVehicleResponse")]
        DeepSpaceNetwork.BackendServiceReference.Telemetry GetTelemetryOfVehicle(string vehicleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetTelemetryOfVehicle", ReplyAction="http://tempuri.org/BackendServices/GetTelemetryOfVehicleResponse")]
        System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Telemetry> GetTelemetryOfVehicleAsync(string vehicleName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BackendServicesChannel : DeepSpaceNetwork.BackendServiceReference.BackendServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BackendServicesClient : System.ServiceModel.ClientBase<DeepSpaceNetwork.BackendServiceReference.BackendServices>, DeepSpaceNetwork.BackendServiceReference.BackendServices {
        
        public BackendServicesClient() {
        }
        
        public BackendServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BackendServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BackendServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BackendServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddSpaceCraft(DeepSpaceNetwork.BackendServiceReference.Vehicle vehicle) {
            return base.Channel.AddSpaceCraft(vehicle);
        }
        
        public System.Threading.Tasks.Task<string> AddSpaceCraftAsync(DeepSpaceNetwork.BackendServiceReference.Vehicle vehicle) {
            return base.Channel.AddSpaceCraftAsync(vehicle);
        }
        
        public DeepSpaceNetwork.BackendServiceReference.Vehicle[] GetAllSpacecraft() {
            return base.Channel.GetAllSpacecraft();
        }
        
        public System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle[]> GetAllSpacecraftAsync() {
            return base.Channel.GetAllSpacecraftAsync();
        }
        
        public long CheckSpacecraftExists(string vehicleName, string payloadName) {
            return base.Channel.CheckSpacecraftExists(vehicleName, payloadName);
        }
        
        public System.Threading.Tasks.Task<long> CheckSpacecraftExistsAsync(string vehicleName, string payloadName) {
            return base.Channel.CheckSpacecraftExistsAsync(vehicleName, payloadName);
        }
        
        public DeepSpaceNetwork.BackendServiceReference.Vehicle[] GetAddedSpacecraft() {
            return base.Channel.GetAddedSpacecraft();
        }
        
        public System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle[]> GetAddedSpacecraftAsync() {
            return base.Channel.GetAddedSpacecraftAsync();
        }
        
        public void UpdateSpacecraft(string vehicleName, string column, string status) {
            base.Channel.UpdateSpacecraft(vehicleName, column, status);
        }
        
        public System.Threading.Tasks.Task UpdateSpacecraftAsync(string vehicleName, string column, string status) {
            return base.Channel.UpdateSpacecraftAsync(vehicleName, column, status);
        }
        
        public DeepSpaceNetwork.BackendServiceReference.Vehicle[] GetAllOnlineSpacecraft() {
            return base.Channel.GetAllOnlineSpacecraft();
        }
        
        public System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle[]> GetAllOnlineSpacecraftAsync() {
            return base.Channel.GetAllOnlineSpacecraftAsync();
        }
        
        public DeepSpaceNetwork.BackendServiceReference.Vehicle GetSpacecraft(string vehicleName) {
            return base.Channel.GetSpacecraft(vehicleName);
        }
        
        public System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle> GetSpacecraftAsync(string vehicleName) {
            return base.Channel.GetSpacecraftAsync(vehicleName);
        }
        
        public DeepSpaceNetwork.BackendServiceReference.Vehicle[] GetAllOnlinePayload() {
            return base.Channel.GetAllOnlinePayload();
        }
        
        public System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle[]> GetAllOnlinePayloadAsync() {
            return base.Channel.GetAllOnlinePayloadAsync();
        }
        
        public void UpdateTelemetryMap(string vehicleName, DeepSpaceNetwork.BackendServiceReference.Telemetry telemetry) {
            base.Channel.UpdateTelemetryMap(vehicleName, telemetry);
        }
        
        public System.Threading.Tasks.Task UpdateTelemetryMapAsync(string vehicleName, DeepSpaceNetwork.BackendServiceReference.Telemetry telemetry) {
            return base.Channel.UpdateTelemetryMapAsync(vehicleName, telemetry);
        }
        
        public DeepSpaceNetwork.BackendServiceReference.Telemetry GetTelemetryOfVehicle(string vehicleName) {
            return base.Channel.GetTelemetryOfVehicle(vehicleName);
        }
        
        public System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Telemetry> GetTelemetryOfVehicleAsync(string vehicleName) {
            return base.Channel.GetTelemetryOfVehicleAsync(vehicleName);
        }
    }
}
