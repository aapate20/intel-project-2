//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeepSpaceNetwork.BackendServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vehicle", Namespace="http://schemas.datacontract.org/2004/07/Backend")]
    [System.SerializableAttribute()]
    public partial class Vehicle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrbitRadiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeepSpaceNetwork.BackendServiceReference.Payload PayloadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrbitRadius {
            get {
                return this.OrbitRadiusField;
            }
            set {
                if ((this.OrbitRadiusField.Equals(value) != true)) {
                    this.OrbitRadiusField = value;
                    this.RaisePropertyChanged("OrbitRadius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeepSpaceNetwork.BackendServiceReference.Payload Payload {
            get {
                return this.PayloadField;
            }
            set {
                if ((object.ReferenceEquals(this.PayloadField, value) != true)) {
                    this.PayloadField = value;
                    this.RaisePropertyChanged("Payload");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Payload", Namespace="http://schemas.datacontract.org/2004/07/Backend")]
    [System.SerializableAttribute()]
    public partial class Payload : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BackendServiceReference.BackendServices")]
    public interface BackendServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/AddSpaceCraft", ReplyAction="http://tempuri.org/BackendServices/AddSpaceCraftResponse")]
        string AddSpaceCraft(DeepSpaceNetwork.BackendServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/AddSpaceCraft", ReplyAction="http://tempuri.org/BackendServices/AddSpaceCraftResponse")]
        System.Threading.Tasks.Task<string> AddSpaceCraftAsync(DeepSpaceNetwork.BackendServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetAllSpacecraft", ReplyAction="http://tempuri.org/BackendServices/GetAllSpacecraftResponse")]
        DeepSpaceNetwork.BackendServiceReference.Vehicle[] GetAllSpacecraft();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetAllSpacecraft", ReplyAction="http://tempuri.org/BackendServices/GetAllSpacecraftResponse")]
        System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle[]> GetAllSpacecraftAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/CheckSpacecraftExists", ReplyAction="http://tempuri.org/BackendServices/CheckSpacecraftExistsResponse")]
        long CheckSpacecraftExists(string vehicleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/CheckSpacecraftExists", ReplyAction="http://tempuri.org/BackendServices/CheckSpacecraftExistsResponse")]
        System.Threading.Tasks.Task<long> CheckSpacecraftExistsAsync(string vehicleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetAddedSpacecraft", ReplyAction="http://tempuri.org/BackendServices/GetAddedSpacecraftResponse")]
        DeepSpaceNetwork.BackendServiceReference.Vehicle[] GetAddedSpacecraft();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/GetAddedSpacecraft", ReplyAction="http://tempuri.org/BackendServices/GetAddedSpacecraftResponse")]
        System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle[]> GetAddedSpacecraftAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/UpdateSpacecraft", ReplyAction="http://tempuri.org/BackendServices/UpdateSpacecraftResponse")]
        void UpdateSpacecraft(string vehicleName, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BackendServices/UpdateSpacecraft", ReplyAction="http://tempuri.org/BackendServices/UpdateSpacecraftResponse")]
        System.Threading.Tasks.Task UpdateSpacecraftAsync(string vehicleName, string status);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BackendServicesChannel : DeepSpaceNetwork.BackendServiceReference.BackendServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BackendServicesClient : System.ServiceModel.ClientBase<DeepSpaceNetwork.BackendServiceReference.BackendServices>, DeepSpaceNetwork.BackendServiceReference.BackendServices {
        
        public BackendServicesClient() {
        }
        
        public BackendServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BackendServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BackendServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BackendServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddSpaceCraft(DeepSpaceNetwork.BackendServiceReference.Vehicle vehicle) {
            return base.Channel.AddSpaceCraft(vehicle);
        }
        
        public System.Threading.Tasks.Task<string> AddSpaceCraftAsync(DeepSpaceNetwork.BackendServiceReference.Vehicle vehicle) {
            return base.Channel.AddSpaceCraftAsync(vehicle);
        }
        
        public DeepSpaceNetwork.BackendServiceReference.Vehicle[] GetAllSpacecraft() {
            return base.Channel.GetAllSpacecraft();
        }
        
        public System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle[]> GetAllSpacecraftAsync() {
            return base.Channel.GetAllSpacecraftAsync();
        }
        
        public long CheckSpacecraftExists(string vehicleName) {
            return base.Channel.CheckSpacecraftExists(vehicleName);
        }
        
        public System.Threading.Tasks.Task<long> CheckSpacecraftExistsAsync(string vehicleName) {
            return base.Channel.CheckSpacecraftExistsAsync(vehicleName);
        }
        
        public DeepSpaceNetwork.BackendServiceReference.Vehicle[] GetAddedSpacecraft() {
            return base.Channel.GetAddedSpacecraft();
        }
        
        public System.Threading.Tasks.Task<DeepSpaceNetwork.BackendServiceReference.Vehicle[]> GetAddedSpacecraftAsync() {
            return base.Channel.GetAddedSpacecraftAsync();
        }
        
        public void UpdateSpacecraft(string vehicleName, string status) {
            base.Channel.UpdateSpacecraft(vehicleName, status);
        }
        
        public System.Threading.Tasks.Task UpdateSpacecraftAsync(string vehicleName, string status) {
            return base.Channel.UpdateSpacecraftAsync(vehicleName, status);
        }
    }
}
